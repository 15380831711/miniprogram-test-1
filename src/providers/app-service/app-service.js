"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var alter_service_1 = require("../alert-service/alter-service");
var AppServiceProvider = (function () {
    function AppServiceProvider() {
        this.header = { 'content-type': 'application/json' };
        this.alterService = new alter_service_1.AlterServiceProvider();
    }
    AppServiceProvider.prototype.get = function (url, callback, loading) {
        if (loading === void 0) { loading = false; }
        var that = this;
        if (loading) {
            that.alterService.showLoading("loading...");
        }
        wx.request({
            url: that.getReqUrl(url),
            data: { platform: this.getPalformNumber() },
            header: this.header,
            method: "GET",
            dataType: "json",
            responseType: "text",
            success: function (res) {
                that.successHandler(res, callback);
            },
            fail: function (res) {
                that.errorHandler(res);
            },
            complete: function () {
                loading && that.alterService.closeLoading();
            }
        });
    };
    AppServiceProvider.prototype.post = function (url, params, callback, loading) {
        if (loading === void 0) { loading = false; }
        var that = this;
        params.platform = this.getPalformNumber();
        if (loading) {
            that.alterService.showLoading("loading...");
        }
        wx.request({
            url: that.getReqUrl(url),
            data: params,
            header: this.header,
            method: "POST",
            dataType: "json",
            responseType: "text",
            success: function (res) {
                that.successHandler(res, callback);
            },
            fail: function (res) {
                that.errorHandler(res);
            },
            complete: function () {
                loading && that.alterService.closeLoading();
            }
        });
    };
    AppServiceProvider.prototype.getPalformNumber = function () {
        return 4;
    };
    AppServiceProvider.prototype.getReqUrl = function (url) {
        if (url.indexOf("http://") || url.indexOf("https://")) {
            return url;
        }
        return AppServiceProvider.BASE_DOMAIN_API + url;
    };
    AppServiceProvider.prototype.checkLogin = function () {
        var token = "";
        if (token != "") {
            return true;
        }
        else {
            return false;
        }
    };
    AppServiceProvider.prototype.getToken = function () {
        return "";
    };
    AppServiceProvider.prototype.gotoLogin = function () {
    };
    AppServiceProvider.prototype.push = function (url, json) {
        if (json === void 0) { json = {}; }
        var urlParams = Object.keys(json).map(function (key) {
            return encodeURIComponent(key) + "=" + encodeURIComponent(json[key]);
        }).join("&");
        if (url.indexOf("?") == -1) {
            url += ("?" + urlParams);
        }
        else {
            url += ("&" + urlParams);
            ;
        }
        console.log(url);
        wx.navigateTo({
            url: url
        });
    };
    AppServiceProvider.prototype.successHandler = function (res, callback) {
        if (res.data.code == 200) {
            callback && callback(res.data);
        }
        else {
            this.errorHandler(res);
        }
    };
    AppServiceProvider.prototype.errorHandler = function (res) {
        this.alterService.alert(res.data.message || "网络开小差");
    };
    AppServiceProvider.BASE_DOMAIN = "http://www.qingyan.com55.cn/";
    AppServiceProvider.BASE_API = "api/";
    AppServiceProvider.BASE_DOMAIN_API = AppServiceProvider.BASE_DOMAIN + AppServiceProvider.BASE_API;
    return AppServiceProvider;
}());
exports.AppServiceProvider = AppServiceProvider;
//# sourceMappingURL=data:application/json;base64,